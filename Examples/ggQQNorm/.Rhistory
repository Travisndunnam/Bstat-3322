# Skewness
In this section we plot skewed data.  We will have both distributions with negative and positive skewness.
## Negative skewness
```{r}
rm( list=ls())
require( ggplot2 )
source("ggQQ.r")
source( "multiplot.r" )
alpha <- 1
beta  <- 10
x <- c(0,1)
DF <- data.frame( x )
p1 <-
ggplot( DF,
aes( x=x ))+
stat_function( fun=dbeta,
args=list( shape1=9, shape=2 )) +
ylab( "Density" ) +
ggtitle( "Negatively skewed distribution" )
x <- 100 * rbeta( 500, shape1=9, shape2=2  )
DF <- data.frame( x )
p2 <- ggQQ( x )
multiplot( p1, p2, cols=2 )
```
## Positive skewness
```{r}
rm( list=ls())
require( ggplot2 )
source("ggQQ.r")
source( "multiplot.r" )
alpha <- 2
beta  <- 10
x <- c(0,1)
DF <- data.frame( x )
p1 <-
ggplot( DF,
aes( x=x ))+
stat_function( fun=dbeta,
args=list( shape1=alpha, shape2=beta )) +
ylab( "Density" ) +
ggtitle( "Positivelyy skewed distribution" )
x <- rbeta( 500, shape1= alpha, shape2=beta )
DF <- data.frame( x )
p2 <-
ggplot( DF,
aes( x= x)) +
geom_histogram(
aes( y=..density.. ),
binwidth=0.05,
color="black",
fill="white") +
geom_density( color="red" )
p3 <- ggQQ( x )
multiplot( p1, p2, p3, cols=2 )
```
# Practice
The rcode below provides a quick plot that will allow you to use graphics diagnose if a distribution is normally distributed.  It will also allow to specify the departures from normality,
```{r}
require(ggplot2)
source( "ggQQ.r")
source( "multiplot.r" )
diagnose <-
function( y )
{
ggplot( DF,
aes( x= y)) +
geom_histogram(
aes( y =..density..),
color="black",
fill="white" ) +
geom_density( color= "red" ) +
xlab( "Variable of interest ")  +
ylab( "Density" ) +
ggtitle( "Explorartory data analysis: \nHistogram and Density Plot")
}
```
## Distribution 1.
```{r}
library( alr4 )
data( BGSgirls)
head( BGSgirls)
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
```
require(ggplot2)
source( "ggQQ.r")
source( "multiplot.r" )
diagnose <-
function( y )
{
ggplot( DF,
aes( x= y)) +
geom_histogram(
aes( y =..density..),
color="black",
fill="white" ) +
geom_density( color= "red" ) +
xlab( "Variable of interest ")  +
ylab( "Density" ) +
ggtitle( "Explorartory data analysis: \nHistogram and Density Plot")
}
library( alr4 )
data( BGSgirls)
head( BGSgirls)
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
require(ggplot2)
source( "ggQQ.r")
source( "multiplot.r" )
diagnose <-
function( y )
{
DF <- data.frame( y )
ggplot( DF,
aes( x=y)) +
geom_histogram(
aes( y =..density..),
color="black",
fill="white" ) +
geom_density( color= "red" ) +
xlab( "Variable of interest ")  +
ylab( "Density" ) +
ggtitle( "Explorartory data analysis: \nHistogram and Density Plot")
}
library( alr4 )
data( BGSgirls)
head( BGSgirls)
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
require(ggplot2)
source( "ggQQ.r")
source( "multiplot.r" )
diagnose <-
function( y )
{
DF <- data.frame( y )
p1 <- ggplot( DF,
aes( x=y)) +
geom_histogram(
aes( y =..density..),
color="black",
fill="white" ) +
geom_density( color= "red" ) +
xlab( "Variable of interest ")  +
ylab( "Density" ) +
ggtitle( "Explorartory data analysis: \nHistogram and Density Plot")
p2 <- ggQQ( y )
}
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
library( alr4 )
data( BGSgirls)
head( BGSgirls)
WT2 <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( WT2 )
pd <- diagnose( WT2 )
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
souece( "diagniise.r")
source( "diagniise.r")
source( "diagnose.r")
library( alr4 )
source( "diagnose.r")
data( BGSgirls)
head( BGSgirls)
weight <- BGSgirls$WT2    #Girls weight at 2 years
pAll <- diagnose( weight )
pALL
diagnose( weight )
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
source( "multiplot.r" )
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
pAll <- diagnose( weight )
source('C:/Users/Craig/utaDatabase/ggQQNorm/diagnose.R')
p <- diagnose( weight ) +
ggtitle( "Berkley Guidance Study \n Weight at 2 yeas")
p
library( alr4 )
source( "diagnose.r")
data( BGSgirls)
head( BGSgirls)
weight <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( weight )
library( simpleboot )
bootOut <- one.boot( weight,
R=10000 )
bsMeans <- bootOut$t
diagnose(bsMeans )
library( simpleboot )
bootOut <- one.boot( weight,
mean,
R=10000 )
bsMeans <- bootOut$t
diagnose(bsMeans )
bootOut
bootOut
library( simpleboot )
bootOut <- one.boot( weight,
mean,
R=10000 )
bootOut
bsMeans <- bootOut$t
diagnose(bsMeans )
boot.ci( bootOyr, conf=0.095, type="bca")
bootOut$t0
mean(BsMeans )
mean( bsMeans )
bootOut$t0
bsMeans <- bootOut$t
mean( bsMeans )
diagnose(bsMeans )
boot.ci( bootOyr, conf=0.095, type="bca")
boot.ci( bootOut, conf=0.095, type="bca")
?sprintf
library( simpleboot )
bootOut <- one.boot( weight,
mean,
R=10000 )
sampleMean <- bootOut$t0
bsMeans <- bootOut$t
bsMean <- mean( bsMeans )
diagnose(bsMeans )
boot.ci( bootOut,
conf=0.095,
type=c( "norm", "bca"))
TPBS <- read.csv( "TexasPoweball20132014X.csv" )
TPS <- read.csv( "TexasPoweball20132014X.csv" )
head( TPS )
rm( list=ls())
TPS <- read.csv( "TexasPoweball20132014X.csv" )
head( TPS )
tail( TPS )
source( "diagnose.r" )
SalesM <- TPS$PBSalesM
diagnose( SalesM )
qqNorm( PBSalesM )
ggQQ( PBSalesM )
ggQQ( SalesM )
PBSalesM <- TPS$PBSaalesM
{r}
source( "diagnose.r" )
PBSalesM <- TPS$PBSaalesM
diagnose( PBSALESM )
diagnose( PBSalesM )
diagnose( PBSalesM )
View(ggQQ)
View(ggQQ)
PBSalesM <- TPS$PBSaalesM
PBSalesM <- TPS$PBSalesM
diagnose( PBSalesM )
ggQQ( TPS$PBSalesM )
View(diagnose)
View(diagnose)
debugSource('C:/Users/Craig/BSTAT3322/Examples/ggQQNorm/diagnose.R')
debugSource('C:/Users/Craig/BSTAT3322/Examples/ggQQNorm/diagnose.R')
TPS <- read.csv( "TexasPoweball20132014X.csv" )
head( TPS )
tail( TPS )
SalesM <- TPS$PBSalesM
diagnose( SalesM )
debugSource('C:/Users/Craig/BSTAT3322/Examples/ggQQNorm/diagnose.R')
debugSource('C:/Users/Craig/BSTAT3322/Examples/ggQQNorm/diagnose.R')
source( "diagnose.r" )
PBSalesM <- TPS$PBSalesM
diagnose( PBSalesM )
rm(list=ls())
install.packages( "Lahman" )  # If you don't have it.
require(Lahman)
?"Lahman"
head( "Batting" )
data ( "Batting" )
head( Batting )
Batting[ yearID >= 2000,]
Batting[ Batting$yearID >= 2000,]
Batting <- Batting[ Batting$yearID >= 2000,]
head( Batting )
Batting <- Batting[ Batting$AB > 100, ]
Batting$OBP <- with( Batting, ( H + BB + HBP)/(AB + BB+ HBP) )
source( "diagnose.r")
diagnose(  atting$OBP )
diagnose(  Batting$OBP )
?slqdf
library( sqldf )
best <- sqldf( "Select   playerID, OBP
FROM Batting Group By playerID
HAVING OBC = max(OBP)" )
best <- sqldf( "Select   playerID, OBP
FROM Batting Group By playerID
HAVING OBP = max(OBP)" )
```
best <- sqldf( "Select   playerID, OBP
FROM Batting
Group By playerID
HAVING OBP = max(OBP)" )
best
best <- sqldf( "Select   playerID, OBP
FROM Batting
Group By OBP
HAVING OBP = max(OBP)" )
best
best <- sqldf( "Select playerID, nameFirst, nameLast,
FROM Master
WHERE OBP in
( SELECT Max(OBP))
FROM Master))"
mOBP <- max( Batting$$OBP)
Batting$OBP <- with( Batting, ( H + BB + HBP)/(AB + BB+ HBP) )
source( "diagnose.r")
diagnose(  Batting$OBP )
maxOBP <- max( Batting$OBP )
palyerID <- Batting[ Batting$OBP = maxOBP, playerID, 1]
palyerID <- Batting[ Batting$OBP == maxOBP, playerID, 1]
palyerID <- Batting[ Batting$OBP == maxOBP, 1]
playerID <- Batting[ Batting$OBP == maxOBP, 1]
data( Master )
head( Master )
tail( Master )
maxOBP   <- max( Batting$OBP )
playerID <- Batting[ Batting$OBP == maxOBP, 1]
Master[Master$playerID == playerID, 14:15 ]
ad.test( Batting$OBP )
require( nortest )
ad.test( Batting$OBP )
rm(list=ls())
requitre( quantmod )
require( quantmod )
getSymbols( Symbols="WMT" )
WMT <- WMT[[1]]
getSymbols( Symbols="WMT" )
WMT <- WMT$Data
getSymbols( Symbols="WMT" )
getSymbols( Symbols="WMT" )
head(WMT)
price <- WMT$WMT.Close
price <- as.vector( WMT$WMT.Close )
price <- log( WMT$WMT.Close)
price <- log( WMT$WMT.Close)
returns <- lag( price, 1 )
returns <- as.vector( price )
View(price)
rm( list=ls())
set.seed( 1123 )
require( ggplot2)
source("ggQQ.r")
source( "multiplot.r ")
mu <- 50
sigma <- 28.87
xl <- floor( mu - 4 * sigma )
xh <- ceiling(  mu + 4 * sigma )
x <- c( xl, xh )
DF <- data.frame( x )
p1 <- ggplot( DF,
aes( x=x )) +
stat_function( fun=dnorm, args=list( mean=mu, sd=sigma) ) +
ylab( "Desnisty" ) +
ggtitle( expression(  X %~% N(50,28.87) ) )
x <- rnorm( 500, mean=mu, sd=sigma )
DF <- data.frame( x )
p2 <-
ggplot( DF,
aes( x=x )) +
geom_histogram( aes( y=..density.. ),
binwidth=20,
color="black",
fill="white"  ) +
geom_density( color="red" ) +
ylab( "Density" ) +
ggtitle( expression(X %~% N(50,28.87) ) )
p3 <- ggQQ( x )
multiplot( p1, p2, p3, cols=2)
rm( list=ls())
require( ggplot2 )
source( "ggQQ.r" )
source( "multiplot.r")
mu    <- 50
sigma <- 28.97
xmin <- -270
xmax <- 370
x <- seq( xmin, xmax, 0.50 )
fz <- dnorm( ( x-mu ) / sigma  )
ft <- dt( ( x-mu ) / sigma, df=3 )
f <- c( fz, ft )
n <- length( fz )
Distribution  <- c( rep( "Normal", n ),
rep( "Student's t", n ))
x <- rep( x, 2)
DF <- data.frame( x, f, Distribution )
p1 <-
ggplot( DF,
aes( x=x, y=f, color=Distribution)) +
geom_line() +
ylab( "Density ") +
ggtitle( "Leptokurtic Distribution versus Normal Distribution" )
w <- mu + sigma * rt( 500, df=3 )
DF <- data.frame( w )
p2 <-
ggplot( DF,
aes( x=w )) +
geom_histogram( aes( y=..density.. ),
binwidth=20,
color="black",
fill="white" ) +
geom_density( color="red" )
p3 <- ggQQ( w )
multiplot( p1, p2, p3, cols=2)
require( ggplot2 )
source("ggQQ.r")
source( "multiplot.r" )
alpha <- 1
beta  <- 10
x <- c(0,1)
DF <- data.frame( x )
p1 <-
ggplot( DF,
aes( x=x ))+
stat_function( fun=dbeta,
args=list( shape1=9, shape=2 )) +
ylab( "Density" ) +
ggtitle( "Negatively skewed distribution" )
p1
x <- 100 * rbeta( 500, shape1=9, shape2=2  )
DF <- data.frame( x )
p2 <- ggQQ( x )
multiplot( p1, p2, cols=2 )
rm( list=ls())
require( ggplot2 )
source("ggQQ.r")
source( "multiplot.r" )
alpha <- 2
beta  <- 10
x <- c(0,1)
DF <- data.frame( x )
p1 <-
ggplot( DF,
aes( x=x ))+
stat_function( fun=dbeta,
args=list( shape1=alpha, shape2=beta )) +
ylab( "Density" ) +
ggtitle( "Positively skewed distribution" )
x <- rbeta( 500, shape1= alpha, shape2=beta )
DF <- data.frame( x )
p2 <-
ggplot( DF,
aes( x= x)) +
geom_histogram(
aes( y=..density.. ),
binwidth=0.05,
color="black",
fill="white") +
geom_density( color="red" )
p3 <- ggQQ( x )
multiplot( p1, p2, p3, cols=2 )
```
# Practice
The rcode below provides a quick plot that will allow you to use graphics diagnose if a distribution is normally distributed.  It will also allow to specify the departures from normality,
library( alr4 )
source( "diagnose.r")
data( BGSgirls)
head( BGSgirls)
weight <- BGSgirls$WT2    #Girls weight at 2 years
diagnose( weight )
library( simpleboot )
bootOut <- one.boot( weight,
mean,
R=10000 )
sampleMean <- bootOut$t0
bsMeans <- bootOut$t
bsMean <- mean( bsMeans )
diagnose(bsMeans )
boot.ci( bootOut,
conf=0.095,
type=c( "norm", "bca"))
rm( list=ls())
source("diagnose.r")
TPS <- read.csv( "TexasPoweball20132014X.csv" )
head( TPS )
tail( TPS )
SalesM <- TPS$PBSalesM
diagnose( SalesM )
rm(list=ls())
###########################################################
# You only need to run this once. After it has been run   #
# comment the statement so that you will not run again.   #
###########################################################
install.packages( "Lahman" )  # If you don't have it.
require( Lahman )
data ( "Batting" )
head( Batting )
tail( Batting )
Batting <- Batting[ Batting$yearID >= 2000,]
head( Batting )
Batting <- Batting[ Batting$AB > 100, ]
Batting$OBP <- with( Batting, ( H + BB + HBP)/(AB + BB+ HBP) )
source( "diagnose.r")
diagnose(  Batting$OBP )
require( nortest )
ad.test( Batting$OBP )
############################################################
# We need to find the batter with the highest OBP and then #
# look up his name in the master table.                    #
############################################################
data( Master )
head( Master )
tail( Master )
maxOBP   <- max( Batting$OBP )
playerID <- Batting[ Batting$OBP == maxOBP, 1]
Master[Master$playerID == playerID, 14:15 ]
