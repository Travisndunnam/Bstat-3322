{
    "contents" : "---\ntitle: \"Randomization using the randomization function\"\nauthor: \"by Craig W. Slinkman\"\ndate: \"November 2, 2015\"\noutput: word_document\n---\n\nTo make your life simpler I provided a function named randomization that will compute the randomization distribution for completely randomized experimental designs.  \n\n\n\nIn this document we will give three difference examples: \n\n* Testing a true null hypothesis  \n\n* Testing a false null hypothesis  \n\n* Testing a null hypothesis when the response variable is binary.  \n\n# Testing a true null hypothesis\nIn this section we will test a response variable that has the same mean and standard deviation.  Both treatment levels will have a mean $\\mu=75$ and a standard deviation $\\sigma=6$. \n\n## Null and alternative hypotheses\nThe null and alternative hypotheses are\n\n$$NH: \\mu_1 - \\mu_2 = 0$$\n$$AH; \\mu_1 - \\mu_2 \\ne 0$$\n\nNote that we start with a two=tail test.  \n\n## Simulating the data\nWe will sample from these two populations below.use computer simulation to generate our data.  We use the R-function $rnorm$ to generate two sample of size 25 with a mean of 75 and a standard deviation of 6.  We round then to zero decimal places,\n\n```{r Example 1A}\nMU    <- 75\nSIGMA <- 6\nn1 <- 25\nn2 <- 25\n\ny1 <- round( rnorm( n1, MU, SIGMA ), 0 )\ny2 <- round( rnorm( n2, MU, SIGMA ), 0 )\ny1\ny2\n\n```\n\n## Computung the test statistic\nThe test statistic for the randomization test is the difference in the means of the treatment group.  In R we compute the test statistic to two decimal places as follows:  \n\n```{r TestStatstic}\n\ntestStatistic <- round( mean(y1) - mean(y2), 2)\ntestStatistic \n\n```\n\nTo see if the test statistic we must compute a randomization distribution using the experimental data.  We will use the randomization distribution to answer the question how likely are we to observe a test statistic with this a value or a more extreme value if the null hypothesis is true.\n\n## The randomization function\nI have written an R-function  called $randomization$.  This function computes the randomization distribution from the observed experimental data and returns it as a R-vector.  The arguments (inputs) to this function are given in the table below: \n\n\\newline\n\nArgument  | Description  \n----------|-----------------------------------  \ny1        | The observed response values for treatment level 1.  \ny2        | The observed response values for treatment level 2.  \nreps      | The number of replications to compute.  If this argument is left out then 10,000 replications will be used.  \n\n## Loading the randomization function \nBefore we can use the randomization function we must load it. R uses the $source$ statement to load the function.  The code below shows you how to do this.  \n\n```{r Source}\nsource( 'randomization.r' )\n```\n\n## Computing the randomization distribution\nThe values of the response variable are stored in the variables $y1$ and $y2$.  We will create a randomization distribution of size 10,000 with the R-code givewn below.\n\n```{r RD}\n\ndistribution <- randomization( y1, y2 )\n\n```\n## Plotting the randomization distribution\nWe should always plot the randomization distribution and look at the shape of the distribution to see if our results make sense in light of our experimental data.  We will use ggplot2 histogram function to plot this data.  \n\n```{r histogram1}\n\nrequire( ggplot2 )\n\nggplot( data.frame( distribution ),\n        aes( x= distribution )) +\n    geom_histogram(  aes( y=..density..),\n                     binwidth=0.50,\n                     color=\"black\",\n                     fill=\"white\" ) +\n    geom_density( color=\"blue\" ) +\n    scale_x_continuous( breaks=seq( -5, 5, 1 )) +\n    xlab( expression(  bar(y)[1] - bar(y)[2] ) ) +\n    ylab( \"Density\" ) +\n    ggtitle( expression( paste( \n        \"Randomization distribution for testing \",\n        NH: mu[1] - mu[2] == 0))) +\n    theme_bw()\n\n```\n\n## Computing the p-value\nWe compute the p-value in the following manner.  For a two tail test we count the observation in both tails where the absolute value of randomized distribution values $rd$ is greater than or equal to absoulute value o p\n\n\n```{r count}\n\nlength( distribution[ abs( distribution ) >=abs(testStatistic) ] )\n\n```\n\nWe can now compute the p-value by dividing by the number of replications.\n\n```{r}\n\npValue <-  length( distribution[ abs( distribution) >=\n                                      abs(testStatistic) ] ) / \n    length( distribution ) \npValue\npValue <- round( pValue, 4)\n\n```\n\n## Statistical conclusion\nSince I did not specify a level of significance we will use a significance level or 5%.  Therefore, we do not have enough sample evidence to reject the null hypotheis.\n\nIn this case we did not make a Type I error.  \n\n# Testing a false null hypothesis\nSuppose that we run an experiment using a new technology that should increase the mean time for lithoum-ion battery failures.   We will pretend that we know the population means for each of the two treatment groups.  The mean for the control group is 1200 hours.  The expermental group is 1300 hours.  Our experiment will consist of 25 replications for the control and the treatment groups.  \n\n## The data\n\n```{r}\nrm(list=ls())\n\nControl <- round( -1200 * log( runif( 50, 0, 1 )), 1 )\nNew     <- round( -2500 * log( runif( 50, 0, 1 )), 1 )\n\n```\n## The null and alternative hypotheses\n  \n$$NH: \\mu_{New} - \\mu_{Control}=0$$\n$$AH: \\mu_{New} - \\mu_{Control}>0$$\n\n## Compting the test statistic\n  \n \n```{r}\n\ntestStatistic <- mean(New) - mean( Control )\n\n```\n\n## Computing the randomization distribution\n  \n```{r}\n\nsource('randomization.r')\n\ndistribution <- randomization( New, Control )\n\n\n## Ranomization distribution\n\nrequire( ggplot2 )\nggplot( data.frame( distribution),\n        aes( x=distribution )) +\n    geom_histogram( aes(y=..density..),\n                    binwidth=100,\n                    color=\"black\",\n                    fill=\"White\") +\n    geom_density(  color=\"blue\" ) +\n    geom_vline( x=testStatistic,\n                color=\"red\") +\n    annotate( \"text\", \n              x=testStatistic+50,\n              y=0.00075,\n              label=\"bar(y)[N] - bar(y)[C]\",\n              parse=TRUE,\n              hjust=0,\n              color=\"Red\" ) +\n    scale_x_continuous( breaks=seq( -1500, 1500, 500 )) +\n    xlab( expression(  bar(y)[N] - bar(y)[C] ) ) +\n    ylab( \"Density\" ) +\n    ggtitle( expression( paste( \n        \"Randomization distribution NH:\", \n         mu[N] - mu[C] == 0))) +\n    theme_bw()\n\n```\n\n## P-value\nThis is a one-tailed test on the upper tail so we compute the p-value as follows.\n\n```{r}\npValue <- \n    length(distribution[distribution>testStatistic]) /length(distribution)\npValue\n\n```\n## Statistical conclusion\nBecauw the p-value is greaster than 5% we can not rehect the null hypothesis.  \n\n\n",
    "created" : 1446514665071.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4016451972",
    "id" : "68338E6F",
    "lastKnownWriteTime" : 1446524217,
    "path" : "C:/Users/Craig/BSTAT3322/Homework/BSTAT3322-H05/Randomization.Rmd",
    "project_path" : "Randomization.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_markdown"
}